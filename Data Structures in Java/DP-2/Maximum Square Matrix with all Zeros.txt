Maximum Square Matrix With All Zeros
Send Feedback
Given an NxM matrix that contains only 0s and 1s, find out the size of the maximum square sub-matrix with all 0s. You need to return the size of the square matrix with all 0s.
Input format :
The first line of the test case contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively.

Second-line onwards, the next 'N' lines or rows represent the ith row values.

Each of the ith rows constitutes column values separated by a single space (Either 0 or 1).
Output Format:
Print the size of maximum square sub-matrix.
 Constraints :
0 <= N <= 10^4
0 <= M <= 10^4

Time Limit: 1 sec
Sample Input 1:
3 3
1 1 0
1 1 1
1 1 1
Sample Output 1:
1
Sample Input 2:
4 4
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
Sample Output 2:
4


//////////////////////////===============================>>>>>>>>>>>>>>>>>>>>


import java.util.*;
public class Solution {
	

	public static int findMaxSquareWithAllZeros(int[][] input){
       int rows = input.length, cols = rows > 0 ? input[0].length : 0;
	    int dp[][] = new int[rows][cols];
        int res = 0;
        for(int []i : dp) {
            Arrays.fill(i, 0);
        }

        for(int i = 0; i < rows; i++) {
            if(input[i][0] == 0) {
               dp[i][0] = 1;
               res = 1;
            }
        }

        for(int i = 0; i < cols; i++) {
            if(input[0][i] == 0) {
                dp[0][i] = 1;
                res = 1;
            }
        }

        for(int i = 1; i < rows; i++) {
            for(int j = 1; j < cols; j++) {
                if(input[i][j] == 0) {
                    dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));
                    res = Math.max(res, dp[i][j]);
                }
            }
        }

        return res;
	
	}

	
}