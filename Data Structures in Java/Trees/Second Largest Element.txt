Second Largest Element In Tree
Send Feedback
Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40


//////////////////////=======================>>>>>>>>>>>>>>>>>>>>>>>>>>>>




public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
	public static TreeNode<Integer> largest;
	public static TreeNode<Integer> secondLargest;
		
	public static void findSecondLargestHelper(TreeNode<Integer> root) {
         if(root == null) return;

		 if(root.data > largest.data) {
			 secondLargest = largest;
			 largest = root;
		 } else if(root.data > secondLargest.data && root.data != largest.data) {
			 secondLargest = root;
		 }

		 for(TreeNode<Integer> child : root.children) {
			 findSecondLargestHelper(child);
		 }
	}	
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
        largest = new TreeNode<>(Integer.MIN_VALUE);
		secondLargest = largest;

        findSecondLargestHelper(root);
		return secondLargest;
	}
	
	
}
