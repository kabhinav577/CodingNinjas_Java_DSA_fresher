Largest Piece
Send Feedback
It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?
Input Format :
The first line of input contains an integer, that denotes the value of N. 
Each of the following N lines contain N space separated integers.
Output Format :
Print the count of '1's in the biggest piece of '1's, according to the description in the task.
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3



//////////////////////////===============================>>>>>>>>>>>>>>>>>>>>>>>>>>>

public class Solution {

   static int[][] dir = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

	public static int dfs(String[] edge, int n) {
		boolean visited[][] = new boolean[n][n];
        int maxPiece = 0;
        for(int i = 0; i < n ; i++) {
            for(int j = 0 ; j < n; j++) {
                if(!visited[i][j] && edge[i].charAt(j) == '1') {
                    int ans = helper(edge, visited, i , j, n);
                    if(maxPiece < ans) {
                        maxPiece = ans;
                    }
                }
            }
        }
        return maxPiece;
	}

    public static int helper(String []edge, boolean visited[][], int i , int j, int n) {
        int[] X_dir = {0,1,-1,0}; //we are moving in all 4 directions, top, right, down ,left, these are coordinates for these only
		int[] Y_dir = {1,0,0,-1}; 
		int max = 0;
		visited[i][j] = true;

        for(int k = 0 ; k < X_dir.length; k++){
            int x = X_dir[k] + i;
            int y = Y_dir[k] + j;

            if(x >= 0 && y >= 0 && x < n && y < n && edge[x].charAt(y) == '1' && !visited[x][y]) {
                int ans = helper(edge, visited, x, y, n);
                max += ans;
            }
        }
        return max + 1;
    }


}