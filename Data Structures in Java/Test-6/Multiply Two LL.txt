Multiply Two Linked Lists
Send Feedback
1. You are given two linked lists. Data of each node of these linked lists contain a digit from the range: [0, 9].
2. The linked lists represent two numbers.
3. You have to print the product of these two numbers.
Input Format:
Input has already been managed for cpp and java submissions. In cpp and java, you have to just write a function which receives head nodes of two linked lists. The sizes of linked lists are N and M, respectively.
For other languages, the first line of input contains list of N space separated integers, terminated by -1. The following line of input also contains list of M space separated integers, terminated by -1. The integers form the data of nodes of two linked list.   
Constraints:
N and M lies in the range: [1, 1000].
0 <= |Node Data| <= 9
Output format:
Print the product of numbers, represented by two linked lists.
Sample Input:
1 2 3 4 5 -1
1 2 3 -1
Sample Output:
1 5 1 8 4 3 5



///////////////////////////=====================================>>>>>>>>>>>>>>>>


/*Linked List Node Class

class LinkedListNode<T> {
    T data;
    LinkedListNode<T> next;
    
    public LinkedListNode(T data) {
        this.data = data;
        this.next = null;
    }
}

*/
// import java.util.*;
public class Solution {

    public static int length(LinkedListNode<Integer> head) {
        int cnt = 0;
        while(head != null) {
            cnt++;
            head = head.next;
        }
        return cnt;
    }

    public static LinkedListNode<Integer> reverse(LinkedListNode<Integer> head) {
        if(head == null || head.next == null) return null;

        LinkedListNode<Integer> prev = null;
        LinkedListNode<Integer>  curr = head;
        LinkedListNode<Integer> curNext = null;
        while(curr != null) {
            curNext = curr.next;
            curr.next = prev;
            prev = curr;
            curr = curNext;
        }
        return prev;
    }

    public static LinkedListNode<Integer> makeLLOfSize(int n) {
        int nc = 0;
        LinkedListNode<Integer> head = null;
        LinkedListNode<Integer> tail = null;

        while(nc < n) {
            LinkedListNode<Integer> newNode = new LinkedListNode<>(0);
            if(head == null) {
                head = tail = newNode;
            } else {
                tail.next = newNode;
                tail = newNode;
            }
            nc += 1;
        }

       return head;
    }

    private static LinkedListNode<Integer> addFirst(LinkedListNode<Integer> head) {
             LinkedListNode<Integer>  newNode = new LinkedListNode<>(0);
             if(head == null) {
                 head = newNode;
             }else {
                 newNode.next = head;
                 head = newNode;
             }
             return head;
    }

    

    public static void print(LinkedListNode<Integer> head) {
       if(head == null) return;

       while(head.data == 0) {
           head = head.next;
       }

       while(head != null) {
           System.out.print(head.data + " ");
           head = head.next;
       }

       System.out.println();
    }

    public static void multiply(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        //Your code goes here
        head1 = reverse(head1);
        head2 = reverse(head2);

        int len1 = length(head1);
        int len2 = length(head2);

        LinkedListNode<Integer> first = head1;
        LinkedListNode<Integer> second = head2;

        int carry = 0;
        LinkedListNode<Integer> res1 = makeLLOfSize(len1 + len2 + 1);

        while(second != null) {
            LinkedListNode<Integer> res2 = makeLLOfSize(len1 + len2 + 1);
            first = head1;
            LinkedListNode<Integer> temp2 = res2;
            LinkedListNode<Integer> temp1 = res1;
            carry = 0;

            while(first != null) {
                int ans = temp1.data + carry + second.data * first.data;
                temp2.data = ans % 10;
                carry = ans / 10;
                temp2 = temp2.next;
                temp1 = temp1.next;
                first = first.next;
            }

            if(carry != 0) {
                int ans = temp1.data + carry;
                temp2.data = ans;
            }

            res1 = res2;
            head1 = addFirst(head1);

            second = second.next;
        }

        res1 = reverse(res1);
        print(res1);
    }

}