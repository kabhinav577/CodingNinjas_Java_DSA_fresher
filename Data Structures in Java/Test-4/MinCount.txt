Minimum Count
Send Feedback
Given an integer N, find and return the count of minimum numbers, sum of whose squares is equal to N.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. Output will be 1, as 1 is the minimum count of numbers required.
Note : x^y represents x raise to the power y.
Input Format :
Integer N
Output Format :
Required minimum count
Constraints :
1 <= N <= 50
Sample Input 1 :
12
Sample Output 1 :
3
Sample Output 1 Explanation :
12 can be represented as :
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1
1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 1^1 + 2^2
1^1 + 1^1 + 1^1 + 1^1 + 2^2 + 2^2
2^2 + 2^2 + 2^2
As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1


////////////////////////------------------------------>>>>>>>>>>>>>>>>>>>>>>

import java.util.*;
public class Solution {
	
	public static int minCount(int n){
		if(n <= 1) return n;

		int ans = n;

		for(int i = 1; i <= n; i++ ) {
			int sqr = i * i;
			if(sqr > n) 
			   break;

			ans = Math.min(ans, minCount(n - sqr) + 1);   
		}

		return ans;
	}
}


/////////////////------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
USING DP SOLVE THIS PROBLEM
--------------------------------------------->>>>>>>>>>>>>>>>

import java.util.*;
public class Solution {
	
	public static int minCount(int n){
		int[] dp = new int[n + 1];
		Arrays.fill(dp, Integer.MAX_VALUE);
		dp[0] = 0;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j * j <= i; j++) {
				dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
			}
		}
		return dp[n];
		
	}
}
