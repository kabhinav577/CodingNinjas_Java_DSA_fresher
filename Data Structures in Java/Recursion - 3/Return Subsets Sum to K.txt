Return subsets sum to K
Send Feedback
Given an array A of size n and an integer K, return all subsets of A which sum to K.
Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.


Note : The order of subsets are not important.


Input format :
Line 1 : Integer n, Size of input array
Line 2 : Array elements separated by space
Line 3 : K 
Constraints :
1 <= n <= 20
Sample Input :
9 
5 12 3 17 1 18 15 3 17 
6
Sample Output :
3 3
5 1



/////////////////////////////===================================>>>>>>>>>>>>>>>>>>>>>>>>


import java.util.*;
public class solution {

	// Return a 2D array that contains all the subsets which sum to k
	public static int[][] subsetsSumK(int input[], int k) {
		// Write your code here
		List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        subsetsSumKHelper(input , k , 0 , temp , result);

		int[][] resultArray = new int[result.size()][];
        for (int i = 0; i < result.size(); i++) {
            List<Integer> list = result.get(i);
            int[] arrTemp = new int[list.size()];
            for (int j = 0; j < list.size(); j++) {
                arrTemp[j] = list.get(j);
            }
            resultArray[i] = arrTemp;
        }
        return resultArray;    
	}

	private static void subsetsSumKHelper(int[] arr, int k, int index, List<Integer> temp, List<List<Integer>> result) {
        if (k == 0) {
            result.add(new ArrayList<>(temp));
            return;
        }
        if (index == arr.length || k < 0) {
            return;
        }
        // exclude the current element
        subsetsSumKHelper(arr, k, index + 1, temp, result);
        // include the current element
        temp.add(arr[index]);
        subsetsSumKHelper(arr, k - arr[index], index + 1, temp, result);
        // backtrack
        temp.remove(temp.size() - 1);
    }
}
